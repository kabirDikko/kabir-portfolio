---
import Layout from "../layouts/Layout.astro";
import SectionHeading from "../components/SectionHeading.astro";
import BlogCard from "../components/BlogCard.astro";
import ProjectCard from "../components/ProjectCard.astro";
import CertificationCard from "../components/CertificationCard.astro";
import InfiniteCertificationsScroller from "../components/InfiniteCertificationsScroller.astro";
import { getCollection } from "astro:content";
import {
  Cloud,
  Award,
  Cpu,
  Boxes,
  FileCode,
  Server,
  ArrowRight,
} from "lucide-astro";

// For GitHub Pages compatibility
const siteBase = import.meta.env.BASE_URL || '/';

const latestBlogPosts = (await getCollection("blog"))
  .sort(
    (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  )
  .slice(0, 2);

const latestProjects = (await getCollection("projects"))
  .sort(
    (a, b) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  )
  .slice(0, 2);
---

<Layout title="Kabir Dikko - Cloud Engineer">
  <div class="page-container pt-0">
    <!-- Hero Section with Matrix digital rain effect -->
    <section
      id="hero"
      class="min-h-[calc(100vh-8rem)] flex flex-col justify-center animate-on-scroll visible relative"
    >
      <!-- Circuit Board Animation - Matrix style -->
      <div class="circuit-container">
        <div class="circuit-grid"></div>
        <!-- Circuit animations will be added by JavaScript -->
      </div>
      
      <!-- Binary Background - Matrix digital rain -->
      <div class="binary-bg">
        <!-- Matrix digital rain elements will be added by JavaScript -->
      </div>
      
      <!-- Electric Arc Effect - Matrix sparks -->
      <div class="electric-arcs">
        <!-- Matrix spark effects will be added by JavaScript -->
      </div>
      
      <div class="py-12 md:py-20 md:w-3/4 relative z-2">
        <div class="hero-content-wrapper bg-background/70 backdrop-blur-sm p-6 rounded-lg shadow-lg border-primary/30 border">
          <div
            class="inline-block px-3 py-1 mb-6 text-xs font-semibold bg-black/50 text-primary rounded-sm border border-primary/50 shadow-[0_0_10px_hsla(var(--primary),0.6)]"
          >
            Cloud Engineer & DevOps Specialist
          </div>
          <h1 class="text-4xl md:text-6xl font-bold mb-6" data-text="Kabir Dikko">
            <div class="text-gradient-primary mb-6 typewriter-name">Kabir Dikko</div>
            <div
              class="text-muted-foreground/90 text-4xl md:text-5xl font-light leading-tight typewriter-tagline"
            >
              I design
              <span class="text-primary font-medium"
                >reliable cloud infrastructure</span
              > for complex challenges
            </div>
          </h1>
          <div class="flex flex-col sm:flex-row gap-4 mt-8">
            <a
              href={`${siteBase}projects`}
              class="btn-electric px-6 py-3 bg-primary text-primary-foreground rounded-sm font-medium hover:bg-primary/90 transition-colors inline-flex items-center group border border-primary/20 shadow-[0_0_12px_hsla(var(--primary),0.5)] touch-action-manipulation"
            >
              VIEW PROJECTS
              <ArrowRight
                size={16}
                class="ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform"
              />
            </a>
            <a
              href={`${siteBase}contact`}
              class="btn-electric px-6 py-3 bg-accent/70 text-accent-foreground rounded-sm font-medium hover:bg-accent/90 transition-colors border border-primary/40 shadow-[0_0_8px_hsla(var(--primary),0.4)] touch-action-manipulation"
            >
              CONTACT ME
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Recent Projects -->
    <section id="projects" class="section animate-on-scroll visible">
      <SectionHeading
        title="Work & Projects"
        subtitle="Selected cloud infrastructure and DevOps projects I've developed."
      >
        <a
          href={`${siteBase}projects`}
          class="text-primary hover:underline inline-flex items-center text-sm font-medium mt-2 touch-action-manipulation py-2 px-1"
        >
          All projects <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="w-4 h-4 ml-1"><path d="m9 18 6-6-6-6"></path></svg
          >
        </a>
      </SectionHeading>

      <div class="grid md:grid-cols-2 gap-6">
        {
          latestProjects.map((project) => (
            <ProjectCard
              title={project.data.title}
              description={project.data.description}
              imageUrl={project.data.heroImage}
              tags={project.data.tags}
              repoUrl={project.data.repoUrl}
              liveUrl={project.data.liveUrl}
            />
          ))
        }
      </div>
    </section>

    <!-- Latest Blog Posts -->
    <section id="blog" class="section animate-on-scroll visible">
      <SectionHeading
        title="Articles"
        subtitle="Technical insights on cloud technology and infrastructure."
      >
        <a
          href={`${siteBase}blog`}
          class="text-primary hover:underline inline-flex items-center text-sm font-medium mt-2 touch-action-manipulation py-2 px-1"
        >
          More articles <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="w-4 h-4 ml-1"><path d="m9 18 6-6-6-6"></path></svg
          >
        </a>
      </SectionHeading>

      <div class="grid md:grid-cols-2 gap-6">
        {
          latestBlogPosts.map((post) => (
            <BlogCard
              title={post.data.title}
              excerpt={post.data.excerpt}
              date={post.data.date}
              readTime={`${Math.ceil(post.data.excerpt.length / 500)} min read`}
              category={post.data.category}
              slug={post.slug}
              imageUrl={post.data.image}
            />
          ))
        }
      </div>
    </section>

    <!-- Certifications Section -->
    <section id="certifications" class="section animate-on-scroll visible">
      <SectionHeading
        title="Certifications"
        subtitle="AWS, Kubernetes, and Terraform certifications."
      />

      <div class="certification-scroller-container">
        <InfiniteCertificationsScroller
          items={[
            {
              title: "AWS Certified AI Practitioner",
              issuer: "Amazon Web Services",
              issueDate: "2025-01-17",
              credentialUrl:
                "https://www.credly.com/badges/3dbebd96-122f-483d-b0e6-9fdb896090b5",
              icon: Cpu,
            },
            {
              title: "AWS Certified AI Practitioner Early Adopter",
              issuer: "Amazon Web Services",
              issueDate: "2025-01-17",
              credentialUrl:
                "https://www.credly.com/badges/3dbebd96-122f-483d-b0e6-9fdb896090b5",
              icon: Award,
            },
            {
              title: "AWS Certified Solutions Architect – Professional",
              issuer: "Amazon Web Services",
              issueDate: "2024-04-16",
              credentialUrl:
                "https://www.credly.com/badges/1b6271cc-83aa-4658-802e-efe1551ed822",
              icon: Server,
            },
            {
              title: "CKA: Certified Kubernetes Administrator",
              issuer: "Cloud Native Computing Foundation",
              issueDate: "2023-01-01",
              credentialUrl:
                "https://www.credly.com/badges/78ac0345-3716-4ed6-9bdb-3fde3bbc7a68",
              icon: Boxes,
            },
            {
              title: "HashiCorp Certified: Terraform Associate",
              issuer: "HashiCorp",
              issueDate: "2023-01-01",
              credentialUrl:
                "https://www.credly.com/badges/61b0f78f-0b2f-45f0-8d57-b987858d1cb4",
              icon: FileCode,
            },
            {
              title: "AWS Certified Solutions Architect – Associate",
              issuer: "Amazon Web Services",
              issueDate: "2021-02-04",
              credentialUrl:
                "https://www.credly.com/badges/75f7538c-7eef-416b-b143-22fc45fb0f46",
              icon: Cloud,
            },
            {
              title: "AWS Certified Cloud Practitioner",
              issuer: "Amazon Web Services",
              issueDate: "2021-01-11",
              credentialUrl:
                "https://www.credly.com/badges/b3c9fc79-e48d-4c18-9524-37fc324cda02",
              icon: Cloud,
            },
          ]}
          speed="fast"
          pauseOnHover={true}
        />
      </div>
    </section>
  </div>
</Layout>

<script>
  // Animation on scroll
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
          }
        });
      },
      { threshold: 0.1 }
    );

    const sections = document.querySelectorAll(".animate-on-scroll");
    sections.forEach((section) => observer.observe(section));
    
    // Typewriter effect for name with cursor blinking
    const typewriterName = document.querySelector('.typewriter-name') as HTMLElement;
    if (typewriterName) {
      typewriterName.style.borderRight = '0.1em solid transparent';
      setInterval(() => {
        typewriterName.style.borderRight = 
          typewriterName.style.borderRight === '0.1em solid transparent' 
            ? '0.1em solid hsl(var(--primary))' 
            : '0.1em solid transparent';
      }, 700);
    }
    
    // Circuit board animation - reduced intensity
    const circuitContainer = document.querySelector('.circuit-container') as HTMLElement;
    if (circuitContainer) {
      const gridWidth = circuitContainer.offsetWidth;
      const gridHeight = circuitContainer.offsetHeight;
      
      // Create fewer circuit nodes and lines
      const nodeCount = Math.min(10, Math.floor(gridWidth * gridHeight / 50000)); // Reduced from typical 20-30
      
      // Create circuit nodes
      for (let i = 0; i < nodeCount; i++) {
        const node = document.createElement('div');
        node.className = 'circuit-node';
        
        // Random position
        node.style.left = `${Math.random() * 95}%`;
        node.style.top = `${Math.random() * 95}%`;
        
        // Set animation with random delay
        const delay = Math.random() * 10;
        node.style.animation = `nodeFlash 3s ease-in-out ${delay}s infinite`;
        
        circuitContainer.appendChild(node);
        
        // Create fewer connecting lines from this node (1-2 instead of 2-3)
        const lineCount = Math.floor(Math.random() * 2) + 1;
        
        for (let j = 0; j < lineCount; j++) {
          const line = document.createElement('div');
          line.className = 'circuit-line';
          
          // Position at the same place as the node
          line.style.left = node.style.left;
          line.style.top = node.style.top;
          
          // Random direction (horizontal, vertical, or diagonal)
          const direction = Math.floor(Math.random() * 3);
          if (direction === 0) {
            line.classList.add('horizontal-circuit');
          } else if (direction === 1) {
            line.classList.add('vertical-circuit');
          } else {
            line.classList.add('diagonal-circuit');
          }
          
          // Random length (shorter than before)
          const length = 30 + Math.floor(Math.random() * 70); // Reduced max from 100
          if (direction === 0) {
            line.style.width = `${length}px`;
          } else if (direction === 1) {
            line.style.height = `${length}px`;
          } else {
            const diagLength = Math.sqrt(2) * length;
            line.style.width = `${diagLength}px`;
          }
          
          // Set animation with slightly delayed timing compared to the node
          const lineDelay = delay + 0.2;
          line.style.animation = `lineFlash 3s ease-in-out ${lineDelay}s infinite`;
          
          circuitContainer.appendChild(line);
        }
      }
    }
    
    // Binary background - Matrix digital rain
    const binaryBg = document.querySelector('.binary-bg') as HTMLElement;
    if (binaryBg) {
      const rowCount = 25; // More rows for Matrix feel
      const binaryElements = 20; // More elements for Matrix feel
      
      // Generate more rows of Matrix digital rain
      for (let i = 0; i < rowCount; i++) {
        // Create a row of binary
        const row = document.createElement('div');
        row.className = 'binary-text';
        row.style.top = `${Math.random() * 5}%`; // Start at random positions near the top
        row.style.left = `${Math.random() * 100}%`;
        
        // Random speed and delay for more realistic Matrix effect
        const speed = 5 + Math.random() * 15; // Random speed between 5-20s
        const delay = Math.random() * 5;
        row.style.animation = `matrix-rain ${speed}s linear ${delay}s infinite`;
        
        // Generate binary string with more variety for Matrix style
        let binaryString = '';
        for (let j = 0; j < binaryElements; j++) {
          // Mix in some special characters for authentic Matrix feel
          const rand = Math.random();
          if (rand < 0.7) {
            binaryString += Math.random() > 0.5 ? '1' : '0';
          } else if (rand < 0.8) {
            binaryString += Math.random() > 0.5 ? '>' : '<';
          } else if (rand < 0.9) {
            binaryString += Math.random() > 0.5 ? '+' : '=';
          } else {
            binaryString += Math.random() > 0.5 ? '|' : '/'; 
          }
          binaryString += ' ';
        }
        
        row.textContent = binaryString;
        row.style.color = `hsla(135, 100%, ${50 + Math.random() * 30}%, ${0.5 + Math.random() * 0.5})`;
        binaryBg.appendChild(row);
      }
    }
    
    // Add Matrix glitch effect to headings
    document.querySelectorAll('h1, h2, h3').forEach(heading => {
      const text = heading.textContent || '';
      heading.setAttribute('data-text', text);
    });
    
    // Add electric arc elements - enhanced
    const electricArcs = document.querySelector('.electric-arcs') as HTMLElement;
    if (electricArcs) {
      // Create more random electric arcs
      for (let i = 0; i < 5; i++) { // Reduced from 8 to 5 arcs
        const arc = document.createElement('div');
        arc.className = 'electric-arc';
        arc.style.position = 'absolute';
        arc.style.width = `${50 + Math.random() * 100}px`;
        arc.style.height = `${2 + Math.random() * 2}px`;
        arc.style.top = `${Math.random() * 100}%`;
        arc.style.left = `${Math.random() * 100}%`;
        arc.style.transform = `rotate(${Math.random() * 360}deg)`;
        arc.style.background = `linear-gradient(90deg, 
          transparent, 
          hsla(var(--primary), 0.3), 
          hsla(var(--primary), 0.7), 
          hsla(var(--primary), 0.3), 
          transparent)`;
        arc.style.boxShadow = '0 0 8px hsla(var(--primary), 0.6)';
        arc.style.borderRadius = '3px';
        arc.style.opacity = '0';
        arc.style.zIndex = '1';
        
        // Set random animation delay for each arc
        const delay = Math.random() * 5;
        const duration = 0.5 + Math.random() * 1;
        arc.style.animation = `spark ${duration}s ease-in-out ${delay}s infinite`;
        
        electricArcs.appendChild(arc);
      }
    }
  });
</script>

<style>
  .hero-content-wrapper {
    position: relative;
    z-index: 10;
    border: 1px solid hsla(var(--primary), 0.1);
    max-width: 95%;
  }
  
  .electric-arcs {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
  }
  
  .electric-arc {
    position: absolute;
    opacity: 0;
  }
  
  @keyframes spark {
    0%, 100% { 
      opacity: 0;
      transform: scaleX(0.8) rotate(var(--rotation, 0deg)); 
      box-shadow: 0 0 3px hsla(var(--primary), 0.3);
    }
    50% { 
      opacity: 0.7;
      transform: scaleX(1.2) rotate(var(--rotation, 0deg)); 
      box-shadow: 0 0 8px hsla(var(--primary), 0.6);
    }
  }
</style>
