---
import CertificationCard from "./CertificationCard.astro";

interface Props {
  items: Array<{
    title: string;
    issuer: string;
    issueDate: string;
    credentialUrl: string;
    icon: any;
  }>;
  direction?: "left" | "right";
  speed?: "fast" | "normal" | "slow";
  pauseOnHover?: boolean;
}

const {
  items,
  direction = "left",
  speed = "normal",
  pauseOnHover = true,
} = Astro.props;

// Set animation properties based on speed
// We'll set a CSS variable and handle responsive speeds in the CSS
const baseAnimationDuration =
  speed === "fast" ? "20s" : speed === "normal" ? "40s" : "80s";

// Set animation direction
const animationDirection = direction === "left" ? "forwards" : "reverse";
---

<div
  class="scroller relative z-20 max-w-full overflow-hidden [mask-image:linear-gradient(to_right,transparent,white_20%,white_80%,transparent)] mobile-safe-container"
  style={`--animation-duration: ${baseAnimationDuration}; --animation-direction: ${animationDirection};`}
>
  <div
    class="flex min-w-full shrink-0 gap-4 py-4 w-max flex-nowrap animate-scroll"
    class:list={[pauseOnHover && "hover:[animation-play-state:paused] touch-pause-enabled"]}
  >
    {/* First set of items */}
    {
      items.map((item) => (
        <div class="certification-item w-[350px] md:max-w-[350px] max-w-[270px] shrink-0">
          <CertificationCard
            title={item.title}
            issuer={item.issuer}
            issueDate={item.issueDate}
            credentialUrl={item.credentialUrl}
            icon={item.icon}
          />
        </div>
      ))
    }

    {/* Duplicate items for seamless looping */}
    {
      items.map((item) => (
        <div class="certification-item w-[350px] md:max-w-[350px] max-w-[270px] shrink-0">
          <CertificationCard
            title={item.title}
            issuer={item.issuer}
            issueDate={item.issueDate}
            credentialUrl={item.credentialUrl}
            icon={item.icon}
          />
        </div>
      ))
    }
  </div>
</div>

<style>
  @keyframes scroll {
    to {
      transform: translate(calc(-50% - 0.5rem));
    }
  }

  .animate-scroll {
    animation: scroll var(--animation-duration, 40s)
      var(--animation-direction, forwards) linear infinite;
  }
  
  /* Make animation faster on mobile screens */
  @media (max-width: 768px) {
    .animate-scroll {
      animation-duration: calc(var(--animation-duration, 40s) * 0.4) !important;
    }
    
    /* Enable touch-friendly scroll pausing */
    .touch-pause-enabled {
      touch-action: pan-y;
    }
  }

  /* Ensure proper spacing and visibility on small screens */
  @media (max-width: 480px) {
    .scroller {
      mask-image: linear-gradient(to right, transparent, white 10%, white 90%, transparent);
    }
    
    .animate-scroll {
      gap: 0.5rem;
      animation-duration: calc(var(--animation-duration, 40s) * 0.3) !important;
    }
    
    .certification-item {
      transform: scale(0.95);
      transition: transform 0.2s ease;
    }
    
    /* Make cards slightly more engaging on touch */
    .certification-item:active {
      transform: scale(0.97);
    }
  }
</style>

<script>
  // Enhance the touch experience for mobile devices
  document.addEventListener('DOMContentLoaded', () => {
    // Animation pause/resume on touch for mobile
    const scroller = document.querySelector('.animate-scroll') as HTMLElement | null;
    let isTouching = false;
    
    if (scroller && window.matchMedia('(max-width: 768px)').matches) {
      scroller.addEventListener('touchstart', () => {
        isTouching = true;
        scroller.style.animationPlayState = 'paused';
      }, { passive: true });
      
      ['touchend', 'touchcancel'].forEach(event => {
        scroller.addEventListener(event, () => {
          isTouching = false;
          // Resume animation after a slight delay
          setTimeout(() => {
            if (!isTouching) {
              scroller.style.animationPlayState = 'running';
            }
          }, 500);
        }, { passive: true });
      });
    }
    
    // Make all certification cards responsive to taps
    const certificationCards = document.querySelectorAll('.certification-item');
    certificationCards.forEach(card => {
      const cardElement = card as HTMLElement;
      const linkElement = cardElement.querySelector('a') as HTMLElement | null;
      
      cardElement.addEventListener('click', (e) => {
        // Only trigger link on card click if we're on mobile
        if (window.matchMedia('(max-width: 768px)').matches && linkElement) {
          // Don't trigger if we clicked directly on the link already
          if (!(e.target as HTMLElement).closest('a')) {
            e.preventDefault();
            linkElement.click();
          }
        }
      });
    });
  });
</script>
